/* 
 * File:   EventGenerator.h
 * Author: lpiccoli
 *
 * Created on May 26, 2010, 9:31 AM
 */

#ifndef _EVENTGENERATOR_H
#define	_EVENTGENERATOR_H

#include <set>
#include "Defs.h"
#include "Event.h"
#include "EventReceiver.h"

FF_NAMESPACE_START

/**
 * The classes EventGenerator/EventReceiver are loosely based on the Observer
 * pattern.
 *
 * The main difference is that instead of calling update() for all
 * EventReceivers, the EventGenerator calls EventReceiver::send() passing
 * an Event. This event is written to the message queue of the EventReceiver.
 *
 * Examples:
 *   EventGenerator -> PatternManager
 *   EventReceivers -> LoopThreads
 *
 * @author L.Piccoli
 */
class EventGenerator {
public:
    EventGenerator();
    virtual ~EventGenerator();

    int add(EventReceiver &receiver);
    int remove(EventReceiver &receiver);
    int send(Event &event);
    bool isEmpty();

    long long getEventCount() { return _eventCount; };
    int getReceiverCount() { return _receivers.size(); };

    friend class PatternManagerTest;
    friend class ExecThreadTest;

private:
    /** Set of EventReceivers that get Events generated by this object */
    std::set<EventReceiver *> _receivers;

    /** Count the number of events sent to EventReceivers */
    long long _eventCount;
};

FF_NAMESPACE_END

#endif	/* _EVENTGENERATOR_H */

